# Generated by Django 2.0.5 on 2019-12-23 05:46

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_auto_20191219_1009'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_livestock', models.CharField(max_length=100)),
                ('number_of_livestock', models.IntegerField()),
                ('commercial_purpose', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CopingMechanism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coping_medium', models.IntegerField(blank=True, choices=[(1, 'Migration/Residing elsewhere'), (1, 'Sheltered in relatives/neighborâ€™s house'), (1, 'Took a loan '), (1, 'Sold jewelry and assets'), (1, 'Reduced the food quantity'), (1, 'Sold the food stock'), (1, 'Sold the cattle and livestock'), (1, 'Labor enrollment, India'), (1, 'Other')], null=True)),
                ('is_coping_medium', models.NullBooleanField(default=False)),
                ('if_other_medium', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DamageList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DamageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('damages', models.NullBooleanField()),
                ('damage_type', models.IntegerField(choices=[(1, 'Death/Injured family members'), (2, 'House'), (3, 'Furniture'), (4, 'Land'), (5, 'Livestock'), (6, 'Machinery'), (7, 'Crops'), (7, 'Shed'), (8, 'Personal documents'), (9, 'Food Stock'), (10, 'None'), (12, 'Others')], default=1)),
                ('if_house_damage_type', models.IntegerField(blank=True, choices=[(1, 'Damage in foundation'), (1, 'Damage in roof'), (1, 'Minor damages in walls'), (1, 'Completely destroyed'), (1, 'None of the above'), (12, 'Others')], null=True)),
                ('if_house_other_damage', models.CharField(blank=True, max_length=500, null=True)),
                ('damage_other', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DisasterPreparednessMechanism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preparedness', models.IntegerField(blank=True, choices=[(1, 'Disaster risk management'), (1, 'First Aid'), (1, 'Search and rescue'), (1, 'psycho-social support'), (1, 'WASH'), (1, 'VCA'), (1, 'None of the above'), (1, 'Other')], null=True)),
                ('involved_in_disaster_preparedness', models.NullBooleanField(default=False)),
                ('if_other_preparedness', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DisasterProne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.IntegerField(choices=[(1, 'Flood prone area'), (2, 'Landslide prone area'), (3, 'Fire prone area'), (4, 'Black Spot'), (5, 'Animal attack'), (6, 'Lightening'), (7, 'Road accident'), (8, 'Cold wind'), (9, 'Earthquake'), (10, 'Thunderstorm'), (11, 'Flood'), (12, 'Windstorm'), (13, 'Epidemic'), (13, 'Drought'), (14, 'Others')], default=1)),
                ('disaster_other', models.CharField(blank=True, max_length=500, null=True)),
                ('migration', models.BooleanField(default=False)),
                ('place', models.CharField(blank=True, max_length=500, null=True)),
                ('how_long_you_migrated', models.CharField(blank=True, max_length=300, null=True)),
                ('capacity_of_migration_sheltered', models.IntegerField(blank=True, null=True)),
                ('migration_choice', models.IntegerField(blank=True, choices=[(1, 'School'), (1, 'Evacuation shelter'), (1, "In relative/neighbor's house"), (1, 'Open space'), (1, 'Other')], null=True)),
                ('if_other_migration_choice', models.CharField(blank=True, max_length=500, null=True)),
                ('have_fire_extinguisher', models.NullBooleanField(default=False)),
                ('damage_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.DamageType')),
            ],
        ),
        migrations.CreateModel(
            name='DrinkingWater',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drinking_water', models.IntegerField(blank=True, choices=[(1, 'Public Tap-stand'), (1, 'Private Tap-stand'), (1, 'Spring Source'), (1, 'River/Rivulet'), (1, 'Tube well'), (1, 'Other')], null=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, 'Public'), (1, 'Private')], null=True)),
                ('if_other_drinking_water', models.CharField(blank=True, max_length=1000, null=True)),
                ('number_of_house_using_source', models.IntegerField(blank=True, null=True)),
                ('distance_to_source', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Facilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility', models.IntegerField(blank=True, choices=[(1, 'Radio'), (1, 'T.V'), (1, 'Fridge'), (1, 'Oven'), (1, 'Mobile/Telephone'), (1, 'Washing Machine'), (1, 'Other')], null=True)),
                ('if_other_facility', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FamilyDisability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_disability', models.BooleanField()),
                ('disability', models.IntegerField(choices=[(1, 'Mental/psychological disability'), (1, 'Intellectual disability'), (1, 'Multiple disability'), (1, 'Difficulties with communicating'), (1, 'Difficulties with seeing'), (1, 'Difficulties with hearing'), (1, 'Difficulties with both hearing and seeing'), (1, 'Difficulties with self-care like; washing, bathing, etc.'), (1, 'Difficulties with walking or climbing steps'), (1, 'Difficulties with walking or climbing steps'), (1, 'Other')])),
                ('if_other_disability', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodEaten',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food', models.IntegerField(choices=[(1, 'Main staples Maize, rice, sorghum, millet pasta, bread and other cereals Cassava, potatoes and sweet potatoes, other tubers, plantains'), (1, '(Pulses (Beans. Peas, groundnuts and cashew nuts)'), (1, 'Vegetables'), (1, 'Fruits'), (1, 'Meat (goat, poultry, pork, eggs and fish)'), (1, 'Milk and products'), (1, 'Sugar and products'), (1, 'Oil, fats and butter'), (1, 'Condiments (spices, tea, coffee, salt, fish power, small amounts of milk for tea)')])),
                ('no_of_days_food_eaten', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fuel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel', models.IntegerField(blank=True, choices=[(1, 'Kerosene'), (1, 'L.P.G'), (1, 'Guitha'), (1, 'Bio-gas'), (1, 'Electrical appliances like heater/rice cooker'), (1, 'Bio-gas'), (1, 'Firewood/coal'), (1, 'Other')], null=True)),
                ('if_other_fuel', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GuideLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guideline', models.IntegerField(blank=True, choices=[(1, 'LDCRP guideline'), (1, 'DPRP guideline')], null=True)),
                ('know_about_guideline', models.BooleanField(default=False)),
                ('involved_in_development_process', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='HouseHold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('surveyor_name', models.CharField(max_length=500)),
                ('name_of_place', models.CharField(max_length=500)),
                ('ward_no', models.IntegerField(blank=True, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('altitude', models.CharField(blank=True, max_length=100, null=True)),
                ('precision', models.CharField(blank=True, max_length=100, null=True)),
                ('household_no', models.IntegerField(blank=True, null=True)),
                ('house_holder_name', models.CharField(blank=True, max_length=500, null=True)),
                ('age_of_owner', models.IntegerField()),
                ('gender_of_house_owner', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], default=1)),
                ('status_of_owner', models.IntegerField(choices=[(1, 'Male leadership'), (2, 'Femaleâ€™s leadership'), (3, 'Senior Citizenâ€™s leadership'), (4, 'Childrenâ€™s leadership'), (5, 'Single womanâ€™s leadership'), (6, 'Disabled memberâ€™s leadership'), (7, 'other')], default=1)),
                ('if_other_owner_status', models.CharField(blank=True, max_length=500, null=True)),
                ('ethnicity', models.IntegerField(choices=[(1, 'Brahmin'), (2, 'Chhetri'), (3, 'Terai Janajati'), (4, 'Pahadi Janajati'), (5, 'Terai Dalit'), (6, 'Pahadi Dalit'), (7, 'Muslim'), (8, 'Newar'), (9, 'Other')], default=1)),
                ('other_ethnicity', models.CharField(blank=True, max_length=200, null=True)),
                ('religion', models.IntegerField(choices=[(1, 'Hindu'), (2, 'Karmiya Baidya'), (3, 'Mushlim'), (4, 'others')], default=1)),
                ('religion_other', models.CharField(blank=True, max_length=200, null=True)),
                ('mother_tongue', models.IntegerField(choices=[(1, 'Nepali'), (1, 'Maithili'), (1, 'Bhojpuri'), (1, 'Newari'), (1, 'Tamang'), (1, 'Gurung'), (1, 'Limbu'), (1, 'Tharu'), (1, 'Rajbansi'), (1, 'Awadi'), (1, 'Kirati'), (1, 'Other')], default=1)),
                ('other_mother_tongue', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_num', models.CharField(blank=True, max_length=50, null=True)),
                ('education_level', models.IntegerField(choices=[(1, 'Illiterate'), (2, 'Literate'), (3, 'Primary level (1-8)'), (4, 'Secondary level (9-12)'), (5, 'Bachelor degree'), (6, 'Masterâ€™s degree'), (7, 'P.hd')], default=1)),
                ('owner_citizenship_number', models.CharField(blank=True, max_length=100, null=True)),
                ('responder_name', models.CharField(blank=True, max_length=200, null=True)),
                ('responder_gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], default=1)),
                ('responder_age', models.CharField(blank=True, max_length=5, null=True)),
                ('responder_contact', models.CharField(blank=True, max_length=20, null=True)),
                ('other_family_member', models.BooleanField(default=False)),
                ('foods_eaten_in_last7_day', models.CharField(blank=True, max_length=1000, null=True)),
                ('monthly_expanses', models.DecimalField(blank=True, decimal_places=3, max_digits=15, null=True)),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=3, max_digits=15, null=True)),
                ('if_loan_amount', models.DecimalField(blank=True, decimal_places=3, max_digits=15, null=True)),
                ('loan_time', models.CharField(blank=True, max_length=300, null=True)),
                ('whose_ownership', models.IntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (2, 'Both')], null=True)),
                ('house_type', models.IntegerField(blank=True, choices=[(1, 'Permanent house with RCC structure'), (1, 'Permanent house with CGI roof'), (1, 'Permanent house with CGI roof'), (1, 'Permanent house with slate roof'), (1, 'Semi-permanent house'), (1, 'Temporary house with CGI roof'), (1, 'Temporary house with thatched/mud roof'), (1, 'Temporary house with thatched/mud roof'), (1, 'Other')], null=True)),
                ('date_of_establishment', models.CharField(blank=True, max_length=100, null=True)),
                ('number_of_storey', models.CharField(blank=True, max_length=10, null=True)),
                ('number_of_rooms', models.CharField(blank=True, max_length=10, null=True)),
                ('received_building_permit', models.IntegerField(blank=True, choices=[(1, 'Yes'), (1, 'No'), (1, "Don't No")], null=True)),
                ('building_completion_certificate', models.IntegerField(blank=True, choices=[(1, 'Yes'), (1, 'No'), (1, "Don't No")], null=True)),
                ('is_house_earthquake_resilience', models.BooleanField(default=False)),
                ('is_house_landslide_resilience', models.BooleanField(default=False)),
                ('how_much_land_ownership', models.CharField(blank=True, max_length=1000, null=True)),
                ('does_land_lies_near_river_flood_plain', models.BooleanField(default=False)),
                ('land_near_river_flood_plain', models.CharField(blank=True, max_length=1000, null=True)),
                ('image_with_landscape', models.ImageField(blank=True, null=True, upload_to='house_hold')),
                ('time_for_nearest_road', models.CharField(blank=True, max_length=200, null=True)),
                ('road_type', models.IntegerField(blank=True, choices=[(1, 'Graveled road'), (1, 'Alley road')], null=True)),
                ('road_width', models.CharField(blank=True, max_length=100, null=True)),
                ('road_capacity', models.IntegerField(blank=True, choices=[(1, 'Crane/Dozer/Excavator/Truck/Tipper operating road'), (1, 'Minibus/Mini truck operating road'), (1, 'Tractor/Power tailor operating road'), (1, 'Fire brigade operating road'), (1, 'Bus/Pickup/Car operating road'), (1, 'Motorcycle operating road')], null=True)),
                ('time_to_nearest_school', models.CharField(blank=True, max_length=200, null=True)),
                ('time_to_nearest_health_institution', models.CharField(blank=True, max_length=200, null=True)),
                ('time_to_nearest_security_force', models.CharField(blank=True, max_length=200, null=True)),
                ('toilet', models.IntegerField(blank=True, choices=[(1, 'Drainage'), (1, 'Pit hole'), (1, 'Bio-gas attached'), (1, 'Septic tank'), (1, 'Ring type'), (1, 'Other')], null=True)),
                ('if_other_toilet', models.CharField(blank=True, max_length=1000, null=True)),
                ('does_ward_have_identified_risk_area', models.BooleanField(default=False)),
                ('do_you_know_about_warning_system', models.BooleanField(default=False)),
                ('is_there_waning_system', models.BooleanField(default=False)),
                ('did_you_got_early_information_in_disaster', models.BooleanField(default=False)),
                ('if_yes_which_medium_was_used', models.CharField(blank=True, max_length=200, null=True)),
                ('does_ward_have_evacuation_shelter', models.BooleanField(default=False)),
                ('distance_to_evacuation_shelter', models.CharField(blank=True, max_length=100, null=True)),
                ('capacity_of_evacuation_shelter', models.BigIntegerField(blank=True, null=True)),
                ('distance_to_nearest_openspace', models.CharField(blank=True, max_length=100, null=True)),
                ('how_far_nearest_market', models.CharField(blank=True, max_length=100, null=True)),
                ('was_nearest_market_operating_in_disaster', models.BooleanField(default=True)),
                ('was_material_easily_available', models.CharField(blank=True, max_length=100, null=True)),
                ('if_not_material_how_you_managed', models.CharField(blank=True, max_length=100, null=True)),
                ('how_far_is_alternative_market', models.CharField(blank=True, max_length=100, null=True)),
                ('name_of_alternative_market', models.CharField(blank=True, max_length=100, null=True)),
                ('is_there_warehouse_in_your_ward', models.BooleanField(default=True)),
                ('how_often_replace_material_in_emergency_kit', models.CharField(max_length=100)),
                ('contingency_plan_involvement', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='InformationMedium',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info_medium', models.IntegerField(blank=True, choices=[(1, 'Radio/T.V'), (1, 'Local people'), (1, 'Newspaper'), (1, 'Related authority'), (1, 'Havenâ€™t received any information'), (1, 'Hoarding board'), (1, 'Other')], null=True)),
                ('if_other_medium', models.CharField(blank=True, max_length=200, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='info_medium', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurance', models.IntegerField(blank=True, choices=[(1, 'Life insurance'), (1, 'Livestock insurance'), (1, 'House/Other asset insurance'), (1, 'Crop insurance'), (1, 'Other')], null=True)),
                ('if_other_insurance_choice', models.CharField(blank=True, max_length=500, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='InvolvedInSimulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('simulation', models.IntegerField(blank=True, choices=[(1, 'Earthquake'), (1, 'Flood'), (1, 'Fire'), (1, 'Landslide'), (1, 'Other')], null=True)),
                ('involved_in_hazard_simulation', models.NullBooleanField(default=False)),
                ('if_other_simulation', models.CharField(blank=True, max_length=200, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulation', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialsInNearestMarket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_in_market', models.IntegerField(blank=True, choices=[(1, 'Cereals'), (1, 'Pulses'), (1, 'Vegetables'), (1, 'Egg and meat'), (1, 'Agriculture tools'), (1, 'Other non edible items'), (1, 'Construction materials'), (1, 'Clothing'), (1, 'Other')], null=True)),
                ('is_material_available', models.NullBooleanField(default=False)),
                ('if_other_material', models.CharField(blank=True, max_length=200, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_material', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='Occupation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupation', models.IntegerField(choices=[(1, 'Agriculture'), (2, 'Agricultural wages'), (3, 'Daily wages'), (4, 'Government service'), (5, 'Non-government service'), (6, 'Foreign employment'), (7, 'Entrepreneur'), (8, 'Business'), (9, 'Seasonal labor, India'), (10, 'Seasonal labor, Nepal'), (11, 'Student'), (12, 'Other')], default=1)),
                ('if_business', models.BooleanField(default=False)),
                ('if_business_its_type', models.IntegerField(choices=[(1, 'shop'), (1, 'Pharmacy'), (1, 'Stationery'), (1, 'Hardware shop'), (1, 'Hotel/Restaurant'), (1, 'Poultry farming'), (1, 'Livestock farming'), (1, 'Cattle farming'), (1, 'Other agricultural business'), (1, 'Other small business'), (1, 'Other')])),
                ('if_other_occupation', models.CharField(blank=True, max_length=300, null=True)),
                ('if_other_business_occupation', models.CharField(blank=True, max_length=300, null=True)),
                ('if_other_agriculture_business', models.CharField(blank=True, max_length=300, null=True)),
                ('if_other_small_business', models.CharField(blank=True, max_length=300, null=True)),
                ('if_agriculture_bussness_harvest_sufficient', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OwnerFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('age_group', models.IntegerField(choices=[(1, 'less than 5 years'), (1, '5-15 years'), (1, '16-59 years'), (1, '60-70 years'), (1, 'above 70 years')], default=1)),
                ('education_level', models.IntegerField(choices=[(1, 'Illiterate'), (2, 'Literate'), (3, 'Primary level (1-8)'), (4, 'Secondary level (9-12)'), (5, 'Bachelor degree'), (6, 'Masterâ€™s degree'), (7, 'P.hd')], default=1)),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], default=1)),
                ('citizenship_num', models.CharField(blank=True, max_length=30, null=True)),
                ('occupation_of_family', models.IntegerField(choices=[(1, 'Agriculture'), (2, 'Agricultural wages'), (3, 'Daily wages'), (4, 'Government service'), (5, 'Non-government service'), (6, 'Foreign employment'), (7, 'Entrepreneur'), (8, 'Business'), (9, 'Seasonal labor, India'), (10, 'Seasonal labor, Nepal'), (11, 'Student'), (12, 'Other')], default=1)),
                ('involvement_in_occupation', models.IntegerField(choices=[(1, 'Active'), (2, 'Inactive')], default=1)),
                ('if_other_occupation', models.CharField(blank=True, max_length=300, null=True)),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('family_member_criteria', models.IntegerField(choices=[(1, 'Senior citizen of 70 years'), (1, 'Senior Citizen of 60 years'), (1, 'Unmarried 60 years old woman'), (1, '60 years old single woman'), (1, 'Widow of any age'), (1, 'People with disability of any age'), (1, 'Widow of any age'), (1, 'People with disability of any age (Received a red color blindness id card from Department of Women and Children)'), (1, 'People with disability of any age (Received a blue color blindness id card from Department of Women and Children)'), (1, 'Endangered tribes of any age (bankariya, raute, surel, hayu, raaji, kisan, lepcha, meche, kusbadiya (pattharkatta, silakat, kushbadhiyaa, kuchbadhiya) ethnic citizens'), (1, 'Children under 5 years of age, Dalit from all over the country and children under 5 years of age from accham, bajhang, rautahat, jumla, humla, mugu, kalikot, dolpa, mahottari, sarlahi, doti, jajarkot, bajura and siraha)'), (1, 'None of these above')], default=1)),
                ('received_social_security', models.BooleanField(default=False)),
                ('reason_not_received_social_security', models.CharField(blank=True, max_length=200, null=True)),
                ('population_choices', models.IntegerField(blank=True, choices=[(1, 'Pregnant'), (1, 'Lactating mother'), (2, 'Breast feeding woman'), (3, 'Single Woman/widow'), (4, 'Senior Citizen'), (5, 'People with disability'), (6, 'Chronic illness'), (7, 'Nutrition support'), (7, 'None Of Above'), (12, 'Other')], default=1, null=True)),
                ('other_population_choices', models.CharField(blank=True, max_length=100, null=True)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_family', to='core.OwnerFamily')),
            ],
        ),
        migrations.CreateModel(
            name='TechnicalField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technical', models.IntegerField(blank=True, choices=[(1, 'Doctor'), (1, 'Engineer'), (1, 'Sub-engineer'), (1, 'Nurse'), (1, 'H.A/Lab Assistant/Radiologist/Pharmacist'), (1, 'Veterinary'), (1, 'Carpenter'), (1, 'Electrician'), (1, 'Plumber'), (1, 'J.T/J.T.A'), (1, 'Other')], null=True)),
                ('number_of_technical', models.IntegerField(blank=True, null=True)),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], default=1)),
                ('if_other_technical', models.CharField(blank=True, max_length=1000, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technical_man', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle', models.IntegerField(verbose_name=((1, 'Car/Jeep/Van (Personal Purpose)'), (1, 'Car/Jeep/Van (Commercial purpose)'), (1, 'Minibus/Mini truck'), (1, 'Cycle'), (1, 'Bus/Tipper/Big Vehicles'), (1, 'Bus/Tipper/Big Vehicles'), (1, 'Tractor/Power tailor'), (1, 'Tractor/Power tailor'), (1, 'Other heavy equipment'), (1, 'No any vehicles')))),
                ('if_other_heavy_equipment', models.CharField(blank=True, max_length=1000, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='VulnerablePopulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.IntegerField(choices=[(1, 'Pregnant'), (2, 'Breast feeding woman'), (3, 'Single Woman/widow'), (4, 'Senior Citizen'), (5, 'People with disability'), (6, 'Chronic illness'), (7, 'Nutrition support')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='WardFallingProneArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prone_area', models.IntegerField(blank=True, choices=[(1, 'Earthquake'), (1, 'Flood'), (1, 'Fire'), (1, 'Landslide'), (1, 'None of the above')], null=True)),
                ('is_prone_area', models.BooleanField(default=False)),
                ('ward_identified_safe_place_during', models.BooleanField(default=False)),
                ('time_to_safe_place', models.CharField(blank=True, max_length=200, null=True)),
                ('disaster_prone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ward_prone', to='core.DisasterProne')),
            ],
        ),
        migrations.CreateModel(
            name='WarningMediumSuitableForDisaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warning_medium', models.IntegerField(blank=True, choices=[(1, 'Radio'), (1, 'T.V'), (1, 'Miking'), (1, 'Sms'), (1, 'Siren'), (1, 'Other')], null=True)),
                ('if_other_medium', models.CharField(blank=True, max_length=200, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warn_medium', to='core.HouseHold')),
            ],
        ),
        migrations.CreateModel(
            name='WorkDoneOnFlood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_done', models.IntegerField(blank=True, choices=[(1, 'Raised plinth'), (1, 'Strong wall'), (1, 'Proper drainage'), (1, 'other')], null=True)),
                ('if_other_work', models.CharField(blank=True, max_length=1000, null=True)),
                ('house_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_done', to='core.HouseHold')),
            ],
        ),
        migrations.RemoveField(
            model_name='animaldetail',
            name='survey',
        ),
        migrations.RemoveField(
            model_name='familymembers',
            name='survey',
        ),
        migrations.DeleteModel(
            name='AnimalDetail',
        ),
        migrations.DeleteModel(
            name='FamilyMembers',
        ),
        migrations.DeleteModel(
            name='Survey',
        ),
        migrations.AddField(
            model_name='household',
            name='occupation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='house_hold', to='core.Occupation'),
        ),
        migrations.AddField(
            model_name='fuel',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='foodeaten',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_eaten', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='familydisability',
            name='owner_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='family_disability', to='core.OwnerFamily'),
        ),
        migrations.AddField(
            model_name='facilities',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facility', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='drinkingwater',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drinking_water', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='disasterprone',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disaster_prone', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='disasterpreparednessmechanism',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disaster_prepare', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='copingmechanism',
            name='house_hold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coping_mechanism', to='core.HouseHold'),
        ),
        migrations.AddField(
            model_name='animaldetails',
            name='household',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animal_detail', to='core.OwnerFamily'),
        ),
    ]
